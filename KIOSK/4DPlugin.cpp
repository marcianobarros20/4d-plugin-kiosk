/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : KIOSK
 #	author : miyako
 #	2017/03/10
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

namespace KIOSK
{
char mode = KIOSK_OFF;
#if VERSIONWIN
	
	HHOOK	hTaskMgr = NULL;
	HWND hMDI = NULL;
	HWND hTrayWnd = NULL;
	
	void refreshDesktop()
	{
		InvalidateRect(hMDI, NULL, TRUE);
		UpdateWindow(GetDesktopWindow());
	}
	
	void hideTaskTray()
	{
		if(hTrayWnd)
		{
			ShowWindow(hTrayWnd, SW_HIDE);
			refreshDesktop();
		}
	}
	
	void showTaskTray()
	{
		if(hTrayWnd)
		{
			ShowWindow(hTrayWnd, SW_SHOW);
			refreshDesktop();
		}
	}
	
	void hideMainWindowTitleBar()
	{
		if(hMDI)
		{
			SetWindowLong(hMDI, GWL_STYLE, GetWindowLong (hMDI, GWL_STYLE) | WS_POPUP);
			SetWindowLong(hMDI, GWL_STYLE, GetWindowLong (hMDI, GWL_STYLE) &~ WS_CAPTION);
			SetWindowLong(hMDI, GWL_STYLE, GetWindowLong (hMDI, GWL_STYLE) &~ WS_SYSMENU);
			SetWindowPos (hMDI, NULL, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_FRAMECHANGED);
			refreshDesktop();
		}
	}
	
	void showMainWindowTitleBar()
	{
		if(hMDI)
		{
			SetWindowLong(hMDI, GWL_STYLE, GetWindowLong (hMDI, GWL_STYLE) &~ WS_POPUP);
			SetWindowLong(hMDI, GWL_STYLE, GetWindowLong (hMDI, GWL_STYLE) | WS_CAPTION);
			SetWindowLong(hMDI, GWL_STYLE, GetWindowLong (hMDI, GWL_STYLE) | WS_SYSMENU);
			SetWindowPos (hMDI, NULL, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_FRAMECHANGED);
			refreshDesktop();
		}
	}
	
	LRESULT CALLBACK _CALLBACK_WH_KEYBOARD_LL(int code, WPARAM wParam, LPARAM lParam)
	{
		KBDLLHOOKSTRUCT *pkh = (KBDLLHOOKSTRUCT *) lParam;
		BOOL bCtrlKeyDown = FALSE;
		BOOL bAltKeyDown = FALSE;
		BOOL bShiftKeyDown = FALSE;
		
		if(code == HC_ACTION)
		{
			bCtrlKeyDown = GetAsyncKeyState(VK_CONTROL)>>((sizeof(SHORT) * 8) - 1);
			bShiftKeyDown = GetAsyncKeyState(VK_SHIFT)>>((sizeof(SHORT) * 8) - 1);
			bAltKeyDown = pkh->flags & LLKHF_ALTDOWN;
			
			if((pkh->vkCode == VK_ESCAPE && bCtrlKeyDown) ||				// Ctrl+Esc
		   (pkh->vkCode == VK_TAB && bAltKeyDown) ||						// Alt+Tab, Alt+Shift+Tab
		   (pkh->vkCode == VK_ESCAPE && bAltKeyDown) ||				// Alt+Esc, Alt+Shift+Esc
		   (pkh->vkCode == VK_ESCAPE && bCtrlKeyDown && bShiftKeyDown)||	// Ctrl+Shift+Esc
		   (pkh->vkCode == VK_DELETE && bCtrlKeyDown && bAltKeyDown)||		// Ctrl+Alt+Delete	(can't catch hotkeys this way...)
		   (pkh->vkCode == VK_F4 && bAltKeyDown)||							// Alt+F4
		   (pkh->vkCode == VK_LWIN || pkh->vkCode==VK_RWIN))	// Windows
			{
				return 1;
			}
		}
		return CallNextHookEx(hTaskMgr, code, wParam, lParam);
	}
	
	void disableTaskSwitching()
	{
		HKEY hk;
		
		DWORD val = 1;
		
		if(!hTaskMgr)
			hTaskMgr = SetWindowsHookEx(WH_KEYBOARD_LL,
																				(HOOKPROC)_CALLBACK_WH_KEYBOARD_LL,
																				(HINSTANCE)GetModuleHandle(0), 0);
		
		if(hTaskMgr)
		{
			if(RegOpenKey(HKCU, KEY_DisableTaskMgr, &hk) != ERROR_SUCCESS)
				RegCreateKey(HKCU, KEY_DisableTaskMgr, &hk);
			
			RegSetValueEx(hk, VAL_DisableTaskMgr, 0, REG_DWORD, (BYTE*)&val, sizeof(val));
		}
	}
	
	void enableTaskSwitching()
	{
		HKEY hk;
		
		if(hTaskMgr)
		{
			UnhookWindowsHookEx(hTaskMgr);
			hTaskMgr = NULL;
		}
		
		if(!hTaskMgr)
		{
			if(RegOpenKey(HKCU, KEY_DisableTaskMgr, &hk) != ERROR_SUCCESS)
				RegCreateKey(HKCU, KEY_DisableTaskMgr, &hk);
			
			RegDeleteValue(hk, VAL_DisableTaskMgr);
		}
	}
	
	HWND getMDI(){
		//the window class is the folder name of the application
		HWND mdi = NULL;
		wchar_t path[_MAX_PATH] = {0};
		wchar_t * applicationPath = wcscpy(path, (const wchar_t *)PA_GetApplicationFullPath().fString);
		//remove file name (4D.exe)
		PathRemoveFileSpec(path);
		//check instance as well, to be sure
		HINSTANCE h = (HINSTANCE)PA_Get4DHInstance();
		do{
			mdi = FindWindowEx(NULL, mdi, (LPCTSTR)path, NULL);
			if(mdi){
				if(h == (HINSTANCE)GetWindowLongPtr(mdi, GWLP_HINSTANCE)){
					break;
				}
			}
		}while(mdi);
		return mdi;
	}
	
	void enter()
	{
		hideTaskTray();
		disableTaskSwitching();
		hideMainWindowTitleBar();
		mode = KIOSK_ON;
	}
	
	void exit()
	{
		showTaskTray();
		enableTaskSwitching();
		showMainWindowTitleBar();
		mode = KIOSK_OFF;
	}
	
#else
#if __MAC_OS_X_VERSION_MAX_ALLOWED >= 1080
	NSApplicationPresentationOptions options = 0;
	NSApplication *sharedApplication = nil;
#else
	SystemUIMode UIMode = 0;
	SystemUIOptions UIOptions = 0;
#endif
	
	void disableTaskSwitching()
	{
#if __MAC_OS_X_VERSION_MAX_ALLOWED >= 1080
		sharedApplication.presentationOptions =
		NSApplicationPresentationHideMenuBar|NSApplicationPresentationHideDock|
		NSApplicationPresentationDisableAppleMenu|
		NSApplicationPresentationDisableProcessSwitching|
		NSApplicationPresentationDisableForceQuit|
		NSApplicationPresentationDisableSessionTermination|
		NSApplicationPresentationDisableHideApplication;
#else
		SetSystemUIMode(kUIModeAllHidden,
										kUIOptionDisableAppleMenu|
										kUIOptionDisableProcessSwitch|
										kUIOptionDisableForceQuit|
										kUIOptionDisableSessionTerminate|
										kUIOptionDisableHide);
#endif
	}
	
	void enableTaskSwitching()
	{
#if __MAC_OS_X_VERSION_MAX_ALLOWED >= 1080
		sharedApplication.presentationOptions = options;
#else
		SetSystemUIMode (UIMode, UIOptions);
#endif
	}
	
	void enter()
	{
		disableTaskSwitching();
		mode = KIOSK_ON;
	}
	
	void exit()
	{
		enableTaskSwitching();
		mode = KIOSK_OFF;
	}
#endif
}

#pragma mark -

bool IsProcessOnExit()
{
	C_TEXT name;
	PA_long32 state, time;
	PA_GetProcessInfo(PA_GetCurrentProcessNumber(), name, &state, &time);
	CUTF16String procName(name.getUTF16StringPtr());
	CUTF16String exitProcName((PA_Unichar *)"$\0x\0x\0\0\0");
	return (!procName.compare(exitProcName));
}

void OnStartup()
{
#if VERSIONWIN
	KIOSK::hMDI = KIOSK::getMDI();
	KIOSK::hTrayWnd = FindWindow(L"Shell_TrayWnd", NULL);
#else
	
#if __MAC_OS_X_VERSION_MAX_ALLOWED >= 1080
	KIOSK::sharedApplication = [NSApplication sharedApplication];
	KIOSK::options = KIOSK::sharedApplication.presentationOptions;
#else
	GetSystemUIMode(&KIOSK::UIMode, &KIOSK::UIOptions);
#endif
#endif
}

void OnCloseProcess()
{
	if(IsProcessOnExit())
	{
#if VERSIONWIN
		KIOSK::showTaskTray();
		KIOSK::enableTaskSwitching();
		KIOSK::showMainWindowTitleBar();
#endif
	}
}

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
		case kInitPlugin :
		case kServerInitPlugin :
			OnStartup();
			break;
			
		case kCloseProcess :
			OnCloseProcess();
			break;
			
// --- KIOSK

		case 1 :
			KIOSK_SET_MODE(pResult, pParams);
			break;

		case 2 :
			KIOSK_Get_mode(pResult, pParams);
			break;

	}
}

// ------------------------------------- KIOSK ------------------------------------


void KIOSK_SET_MODE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT Param1;

	Param1.fromParamAtIndex(pParams, 1);
	
	if((Param1.getIntValue() == KIOSK_ON) && (KIOSK::mode == KIOSK_OFF))
	{
		KIOSK::enter();
	}
	else if((Param1.getIntValue() == KIOSK_OFF) && (KIOSK::mode == KIOSK_ON))
	{
		KIOSK::exit();
	}
}

void KIOSK_Get_mode(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT returnValue;
	returnValue.setIntValue(KIOSK::mode);
	returnValue.setReturn(pResult);
}

